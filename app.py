from flask import Flask, render_template, request, redirect, url_for, session
'''Flask is a versatile and powerful framework for building web applications
and APIs in Python, suitable for projects of all sizes, from small personal
projects to large-scale enterprise applications.'''
from flask_sqlalchemy import SQLAlchemy
'''SQLAlchemy is a popular Object-Relational Mapping (ORM) library for
Python. SQLAlchemy simplifies the interaction with databases by allowing
developers to work with database objects using Python classes and methods,
rather than writing raw SQL queries.'''
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required
'''Flask-Login simplifies the process of implementing user authentication and
session management in Flask applications, enhancing security and usability for
applications that require user-based functionality.'''
from flask_bcrypt import Bcrypt
'''Using Flask-Bcrypt, developers can enhance the security of their Flask
applications by securely storing user passwords and protecting against common
password-based attacks.'''
from logging.handlers import RotatingFileHandler
'''logging.handlers is a module within Python's built-in logging package that
provides a variety of handler classes for routing and processing log records
generated by the logging module. Handlers are responsible for determining what
happens to the log messages once they have been created by loggers.'''
from config import read_properties_file
import logging
'''Python provides a built-in logging module that allows developers to easily
incorporate logging into their applications.'''
import os
''' os is a built-in module that provides a way to interact with the operating
system.'''

#-------------------------------------------------------------------------------------
bcrypt = Bcrypt()

config_data = read_properties_file("config.properties")
HOST=config_data.get("database.host")
USERNAME=config_data.get("database.username")
PASSWORD=config_data.get("database.password")
DATABASE=config_data.get("database.name")
LEVEL=config_data.get("logging.level")
LOG_FILE=config_data.get("logging.file")

#-------------------------------------------------------------------------------------

app = Flask(__name__, static_folder='static')
#app.config['SERVER_NAME'] = 'ppischool.test:5001'
app.config['SQLALCHEMY_DATABASE_URI'] = f'mysql://{USERNAME}:{PASSWORD}@{HOST}/{DATABASE}'
app.config['SECRET_KEY'] = os.urandom(24)
db = SQLAlchemy(app)

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler = RotatingFileHandler(LOG_FILE, maxBytes=10000, backupCount=1)
handler.setFormatter(formatter)
app.logger.addHandler(handler)

if LEVEL=='DEBUT':
    app.logger.setLevel(logging.DEBUG)
elif LEVEL=='INFO':
    app.logger.setLevel(logging.INFO)
elif LEVEL=='WARNING':
    app.logger.setLevel(logging.WARNING)
else:
    app.logger.setLevel(logging.INFO)

login_manager = LoginManager()
login_manager.init_app(app)

try:
    class User(UserMixin, db.Model):
        id = db.Column(db.Integer, primary_key=True)
        username = db.Column(db.String(50), unique=True)
        password = db.Column(db.String(255))

    with app.app_context():
        db.create_all()

    #-------------------------------------------------------------------------------------
    def hash_password(password):
        return bcrypt.generate_password_hash(password).decode('utf-8')    

    #-------------------------------------------------------------------------------------
    @login_manager.user_loader
    def load_user(user_id):
        return User.query.get(int(user_id))

    #-------------------------------------------------------------------------------------
    @app.route('/')
    def index():
        return render_template('login.html')

    #-------------------------------------------------------------------------------------
    @app.route('/login', methods=['GET', 'POST'])
    def login():
        if request.method == 'POST':
            username = request.form['username']
            password = request.form['password']
            user = User.query.filter_by(username=username).first()
            if user and bcrypt.check_password_hash(user.password, password):
                login_user(user)
                app.logger.info(f'{username} logged in successfully')
                session['username'] = username
                return redirect(url_for('dashboard'))
            else:
                msg = 'Invalid username or password'
                app.logger.warning(msg)
                return render_template('login.html',msg=msg)
        return render_template('login.html')

    #-------------------------------------------------------------------------------------
    @app.route('/register', methods=['GET','POST'])
    def register():
        if request.method == 'GET':
            return render_template('registration.html')
        if request.method == 'POST':
            username = request.form.get('username')
            password = request.form.get('password')
            confirm_password = request.form.get('confirm_password')

            if not (username and password and confirm_password):
                msg = 'All fields are required. Please fill out the registration form.'
                app.logger.warning(msg)
                return render_template('registration.html',msg=msg)

            if password != confirm_password:
                msg = 'Passwords do not match. Please try again.'
                app.logger.warning(msg)
                return render_template('registration.html',msg=msg)
            

            user = User.query.filter_by(username=username).first()

            if not user:
                hashed_password=hash_password(password)
                new_user = User(username=username, password=hashed_password)
                db.session.add(new_user)
                db.session.commit()
                msg=f'Registration successful! Username: {username}, Password: {hashed_password}'
                app.logger.info(msg)
                session['msg']=f'Username: {username}, Password: {hashed_password}'

                return redirect(url_for('registration_success'))
            else:
                msg = 'Registration not successful'
                app.logger.warning(msg)
                return render_template('registration.html',msg=msg)

    #-------------------------------------------------------------------------------------
    @app.route('/success')
    def registration_success():
        msg= session.get('msg')
        return render_template('registration_success.html',msg=msg)
    #-------------------------------------------------------------------------------------
    @app.route('/logout')
    @login_required
    def logout():
        username = session.get('username')
        logout_user()
        app.logger.info(f'{username} Logged out successfully')
        return redirect(url_for('login'))

    #-------------------------------------------------------------------------------------
    @app.route('/dashboard')
    @login_required
    def dashboard():
        username = session.get('username')
        return render_template('dashboard.html', username=username)

    #-------------------------------------------------------------------------------------
    if __name__ == '__main__':
        app.run(debug=True, ssl_context='adhoc')
        #app.run(host='ppischool.testing', port=5000)
    
except Exception as e:
    app.logger.critical(e)
